(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{206:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"type-creator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-creator","aria-hidden":"true"}},[t._v("#")]),t._v(" Type Creator")]),t._v(" "),s("p",[t._v("It is possible that sometimes you need to create GraphQL types that are not based on classes such as union, enum, partial or required types. "),s("strong",[t._v("TypeCreator")]),t._v(" is a class that will allow you to do this using static methods")]),t._v(" "),s("h2",{attrs:{id:"partial"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#partial","aria-hidden":"true"}},[t._v("#")]),t._v(" Partial")]),t._v(" "),s("p",[t._v("TypeScript provides generic types to change the fields in the class. Partial<...> allows you to make all the fields of a class nullable.\nIt is possible to use the same functionality with Rakkit in this way:")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ObjectType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("All fields aren't nullable for the moment")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nullableUser "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TypeCreator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreatePartial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NullableUser"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("And you can simply use it as a type:")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ObjectType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Post")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" nullableUser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Partial"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"required"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#required","aria-hidden":"true"}},[t._v("#")]),t._v(" Required")]),t._v(" "),s("p",[t._v("It works the same way as for "),s("a",{attrs:{href:"#partial"}},[t._v("Partial types")]),t._v(" but the TypeCreator method is "),s("code",[t._v("TypeCreator.CreateRequired")])]),t._v(" "),s("h2",{attrs:{id:"enums"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enums","aria-hidden":"true"}},[t._v("#")]),t._v(" Enums")]),t._v(" "),s("p",[t._v("The enum type documentation is available "),s("a",{attrs:{href:"/graphql/type/enums"}},[t._v("here")])]),t._v(" "),s("h2",{attrs:{id:"unions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unions","aria-hidden":"true"}},[t._v("#")]),t._v(" Unions")]),t._v(" "),s("p",[t._v("The union type documentation is available "),s("a",{attrs:{href:"/graphql/type/unions"}},[t._v("here")])])])},[],!1,null,null,null);a.default=n.exports}}]);